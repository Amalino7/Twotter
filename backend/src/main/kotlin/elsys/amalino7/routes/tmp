import io.ktor.application.*
import io.ktor.auth.*
import io.ktor.auth.jwt.*
import io.ktor.request.*
import io.ktor.response.*
import io.ktor.routing.*

data class User(val internalUserId: Int, val keycloakId: String)
data class PostData(val title: String, val content: String)

fun Application.module() {
    // Configure JWT authentication
    install(Authentication) {
        jwt {
            val jwtAudience = "your-audience"
            realm = "your-realm"
            verifier(
                JWT
                    .require(Algorithm.HMAC256("your-secret")) // Use the appropriate algorithm and secret for Keycloak
                    .withAudience(jwtAudience)
                    .withIssuer("your-keycloak-issuer-url")
                    .build()
            )
            validate { credential ->
                if (credential.payload.audience.contains(jwtAudience)) {
                    JWTPrincipal(credential.payload)
                } else {
                    null
                }
            }
        }
    }

    routing {
        authenticate {
            post("/posts") {
                val principal = call.principal<JWTPrincipal>()
                val keycloakId = principal?.payload?.getClaim("sub")?.asString()

                if (keycloakId != null) {
                    // Extract post data from the request
                    val postData = call.receive<PostData>()

                    // Look up the internal user ID using the Keycloak ID
                    val user = db.getUserByKeycloakId(keycloakId)

                    if (user != null) {
                        // Create the post in the database with the internal user ID
                        val postId = db.createPost(user.internalUserId, postData)
                        call.respond("Post created with ID: $postId")
                    } else {
                        call.respond(HttpStatusCode.Unauthorized, "User not found")
                    }
                } else {
                    call.respond(HttpStatusCode.Unauthorized, "Invalid user")
                }
            }

            get("/posts/{postId}") {
                val principal = call.principal<JWTPrincipal>()
                val keycloakId = principal?.payload?.getClaim("sub")?.asString()
                val postId = call.parameters["postId"]?.toInt()

                if (keycloakId != null && postId != null) {
                    // Look up the internal user ID using the Keycloak ID
                    val user = db.getUserByKeycloakId(keycloakId)

                    if (user != null) {
                        val post = db.getPost(postId)

                        // Check if the user owns the post
                        if (post?.userId == user.internalUserId) {
                            call.respond(post)
                        } else {
                            call.respond(HttpStatusCode.Forbidden, "User does not own this post")
                        }
                    } else {
                        call.respond(HttpStatusCode.Unauthorized, "User not found")
                    }
                } else {
                    call.respond(HttpStatusCode.BadRequest, "Invalid user or post ID")
                }
            }
        }
    }
}
