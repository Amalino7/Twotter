openapi: "3.1.0"
info:
  title: "backend API"
  description: "backend API"
  version: "1.0.0"
servers:
  - url: "http://localhost:8080"
paths:
  /posts:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PostResponse"
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostCreateRequest"
        required: true
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User id not match"
                Example#2:
                  value: "User claim not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Unit"
  /posts/{id}:
    delete:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User id not match"
                Example#2:
                  value: "User id not match"
                Example#3:
                  value: "User claim not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Object"
  /users:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserResponse"
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
  /users/{id}:
    delete:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
  /users/{id}/feed:
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostCreateRequest"
        required: true
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User id not match"
                Example#2:
                  value: "User claim not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PostResponse"
  /users/{id}/followers:
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserResponse"
    post:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FollowerCreateRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /users/{id}/posts:
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PostResponse"
  /callback:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "No token"
  /login:
    get:
      description: ""
  /logout:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /refresh:
    post:
      description: ""
      parameters:
        - name: "refresh_token"
          in: "cookie"
          required: false
          schema:
            type: "string"
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
              examples:
                Example#1:
                  value: "Refresh failed"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
components:
  schemas:
    Instant:
      type: "object"
      properties: { }
    PostResponse:
      type: "object"
      properties:
        id:
          type: "string"
        content:
          type: "string"
        imageUrl:
          type: "string"
        userHandle:
          type: "string"
        userDisplayName:
          type: "string"
        hasLiked:
          type: "boolean"
        likesCount:
          type: "integer"
          format: "int64"
        commentsCount:
          type: "integer"
          format: "int64"
        repostsCount:
          type: "integer"
          format: "int64"
        createdAt:
          $ref: "#/components/schemas/Instant"
        updatedAt:
          $ref: "#/components/schemas/Instant"
      required:
        - "id"
        - "content"
        - "userHandle"
        - "createdAt"
        - "updatedAt"
    PostCreateRequest:
      type: "object"
      properties:
        content:
          type: "string"
        imageUrl:
          type: "string"
        userId:
          type: "string"
      required:
        - "content"
        - "userId"
    Unit:
      type: "object"
      properties: { }
    Object:
      type: "object"
      properties: { }
    UserResponse:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        email:
          type: "string"
        bio:
          type: "string"
        displayName:
          type: "string"
        createdAt:
          $ref: "#/components/schemas/Instant"
        updatedAt:
          $ref: "#/components/schemas/Instant"
        keycloakId:
          type: "string"
      required:
        - "id"
        - "name"
        - "email"
        - "createdAt"
        - "updatedAt"
        - "keycloakId"
    UserCreateRequest:
      type: "object"
      properties:
        name:
          type: "string"
        email:
          type: "string"
        keycloakId:
          type: "string"
      required:
        - "name"
        - "email"
        - "keycloakId"
    FollowerCreateRequest:
      type: "object"
      properties:
        userId:
          type: "string"
      required:
        - "userId"
    Map:
      type: "object"
      properties: { }
    Map_String:
      type: "string"