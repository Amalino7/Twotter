openapi: "3.1.0"
info:
  title: "amalino7 API"
  description: "amalino7 API"
  version: "1.0.0"
servers:
  - url: "https://amalino7"
  - url: "http://localhost:8080"
paths:
  /post/{postId}/comments:
    get:
      description: ""
      parameters:
        - name: "postId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CommentResponse"
    post:
      description: ""
      parameters:
        - name: "postId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentCreateRequest"
        required: true
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CommentResponse"
  /post/{postId}/comments/{id}:
    delete:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "postId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "postId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
                Example#2:
                  value: ""
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CommentResponse"
    patch:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "postId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentUpdateRequest"
        required: true
      responses:
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /users:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserResponse"
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserCreateRequest"
  /users/{id}:
    delete:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
        "204":
          description: "No Content"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    patch:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPatchRequest"
        required: true
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /users/me:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
components:
  schemas:
    CommentResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        postId:
          type: "string"
        content:
          type: "string"
      required:
        - "id"
        - "postId"
        - "content"
    CommentCreateRequest:
      type: "object"
      properties:
        content:
          type: "string"
      required:
        - "content"
    CommentUpdateRequest:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        content:
          type: "string"
          nullable: true
      required:
        - "id"
    UserResponse:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        email:
          type: "string"
        bio:
          type: "string"
          nullable: true
        displayName:
          type: "string"
          nullable: true
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
        keycloakId:
          type: "string"
      required:
        - "id"
        - "name"
        - "email"
        - "createdAt"
        - "updatedAt"
        - "keycloakId"
    UserCreateRequest:
      type: "object"
      properties:
        name:
          type: "string"
        email:
          type: "string"
        keycloakId:
          type: "string"
      required:
        - "name"
        - "email"
        - "keycloakId"
    UserPatchRequest:
      type: "object"
      properties:
        name:
          type: "string"
          nullable: true
        email:
          type: "string"
          nullable: true
        bio:
          type: "string"
          nullable: true
        displayName:
          type: "string"
          nullable: true
    Uuid:
      type: "object"
      properties:
        mostSignificantBits:
          type: "integer"
          format: "int64"
        leastSignificantBits:
          type: "integer"
          format: "int64"
      required:
        - "mostSignificantBits"
        - "leastSignificantBits"
    User:
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/Uuid"
        keycloakId:
          type: "string"
        name:
          type: "string"
        email:
          type: "string"
        bio:
          type: "string"
          nullable: true
        displayName:
          type: "string"
          nullable: true
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
      required:
        - "id"
        - "keycloakId"
        - "name"
        - "email"
        - "createdAt"
        - "updatedAt"